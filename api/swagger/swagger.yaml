swagger: "2.0"
info:
  version: "1.0.6"
  title: NRTS PRC (ACRFD) API
host: localhost:3000
basePath: /api
tags:
- name: "login"
  description: "Logging in"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "search"
  description: "Search operations"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "application"
  description: "Operations on Application objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "feature"
  description: "Operations on Feature objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "document"
  description: "Operations on Document objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "decision"
  description: "Operations on Decision objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "user"
  description: "Operations on User objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "comment"
  description: "Operations on Comment objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
- name: "commentperiod"
  description: "Operations on Comment Period objects"
  externalDocs:
    description: "Find out more about our API"
    url: "http://github.com/bcgov/nrts-prc-api.git"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API, a valid JWT token must be passed in all the queries in
     the 'Authorization' header.


     A valid JWT token is generated by the API and returned in response to a call to
     the /login route and providing a valid Username and Password.


     The following syntax must be used in the 'Authorization' header :

         Bearer xxxxxx.yyyyyyy.zzzzzz

consumes:
  - application/json
produces:
  - application/json

definitions:
### Application Definitions
  Application:
    type: object
    properties:
      _id:
        type: string
        example: "5be3605e21ad2500237d5e0f"
      agency:
        type: string
        example: "Crown Land Allocation"
      areaHectares:
        type: number
        example: 2.5
      businessUnit:
        type: string
        example: "SK - LAND MGMNT - SKEENA FIELD OFFICE"
      centroid:
        type: string
        example: [-130.2898393371777, 54.019088770013575]
      cl_file:
        type: number
        example: 6406200
      client:
        type: string
        example: "ABC SERVICES CORP."
      _createdBy:
        type: string
        example: "idir\username"
      createdDate:
        type: string
        example: "2018-03-23 20:12:31.000Z"
      description:
        type: string
        example: "A high-level description of this application."
      isDeleted:
        type: boolean
        example: false
      legalDescription:
        type: string
        example: "A detailed description of the subject land."
      location:
        type: string
        example: "Porcher Island"
      name:
        type: string
        example: "6406200"
      publishDate:
        type: string
        example: "2018-11-07T21:59:58.000Z"
      purpose:
        type: string
        example: "COMMERCIAL"
      status:
        type: string
        example: "ACCEPTED"
      subpurpose:
        type: string
        example: "MARINA"
      subtype:
        type: string
        example: "LICENCE OF OCCUPATION"
      tantalisID:
        type: number
        example: 926028
      tenureStage:
        type: string
        example: "APPLICATION"
      type:
        type: string
        example: "LICENCE"
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  ApplicationFields:
    type: string
    description: "Optional Application fields to return"
    example: "agency|areaHectares|etc"
    enum: &applicationFields
      - agency
      - areaHectares
      - businessUnit
      - centroid
      - cl_file
      - client
      - _createdBy
      - createdDate
      - description
      - isDeleted
      - legalDescription
      - location
      - name
      - publishDate
      - purpose
      - status
      - subpurpose
      - subtype
      - tantalisID
      - tenureStage
      - type
      - statusHistoryEffectiveDate
      - tags

### Feature Definitions
  Feature:
    type: object
    properties:
      _id:
        type: string
        example: "5ba9b32aae40570019c8fd27"
      type:
        type: string
        example: "Feature"
      geometry:
          type: object
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: string
                  example: [-130.29066471641792, 54.01793907462689]
            type:
              type: string
              example: "Polygon"
      geometryName:
        type: string
      properties:
        type: object
      isDeleted:
        type: boolean
        example: false
      applicationID:
        type: string
        example: "5be3605e21ad2500237d5e0f"
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  FeatureFields:
    type: string
    description: "Optional Feature fields to return"
    example: "type|geometry|etc"
    enum: &featureFields
      - type
      - tags
      - geometry
      - geometryName
      - properties
      - isDeleted
      - applicationID

### Search Definitions
  Search:
    type: object
  SearchFields:
    type: string
    description: "Optional Search fields to return"
    example: "name|etc"
    # TODO: Fix enums
    enum: &searchFields
      - name

### Document Definitions
  Document:
    type: object
    properties:
      _id:
        type: string
        example: "5ab560ea91b5ea001975f3dc"
      _addedBy:
        type: string
        example: "5ab3cd64999d65001916febb"
      _application:
        type: string
        example: "5be3605e21ad2500237d5e0f"
      _decision:
        type: string
        example: "5b22de2c0aefdc001950452b"
      _comment:
        type: string
        example: "5b0f6ef343cf9c0019391cec"
      documentFileName:
        type: string
        example: "6406200_Referral_Maps.PDF"
      displayName:
        type: string
        example: "6406200_Referral_Maps.PDF"
      internalURL:
        type: string
        example: "./uploads/6383043941972836352.pdf"
      internalMime:
        type: string
        example: "application/pdf"
      isDeleted:
        type: boolean
        example: false
      passedAVCheck:
        type: boolean
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  DocumentFields:
    type: string
    description: "Optional Document fields to return"
    example: "displayName|documentFileName|etc"
    enum: &documentFields
      - _addedBy
      - _application
      - _decision
      - _comment
      - documentFileName
      - tags
      - displayName
      - internalURL
      - isDeleted
      - passedAVCheck
      - internalMime

### Comment Definitions
  Comment:
    type: object
    properties:
      _id:
        type: string
        example: "5b0f6ef343cf9c0019391cec"
      _addedBy:
        type: string
      _commentPeriod:
        type: string
        example: "5aea3d1735c3c0001906083b"
      name:
        type: string
      commentNumber:
        type: number
      comment:
        type: string
        example: "This is my comment."
      commentAuthor:
        type: object
        properties:
          _userId:
            type: string
          orgName:
            type: string
          contactName:
            type: string
            example: "Bob Smith"
          location:
            type: string
            example: "Victoria"
          requestedAnonymous:
            type: boolean
          internal:
            type: object
            properties:
              email:
                type: string
              phone:
                type: string
              tags:
                type: string
                example: [["sysadmin"], ["public"]]
          tags:
            type: string
            example: [["sysadmin"], ["public"]]
      review:
        type: object
        properties:
          _reviewerId:
            type: string
          reviewerNotes:
            type: string
          reviewerDate:
            type: string
          tags:
            type: string
            example: [["sysadmin"], ["public"]]
      dateAdded:
        type: string
      commentStatus:
        type: string
        enum: &commentStatusFields
          - Pending
          - Accepted
          - Rejected
      isDeleted:
        type: boolean
        example: false
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  CommentFields:
    type: string
    description: "Optional Comment fields to return"
    example: "commentAuthor|comment|etc"
    enum: &commentFields
      - _addedBy
      - _commentPeriod
      - tags
      - name
      - commentNumber
      - comment
      - commentAuthor
      - review
      - dateAdded
      - commentStatus
      - isDeleted
  CommentSortByFields:
    type: string
    description: "Optional fields to sort comments by"
    example: "+commentStatus|-contactName"
    enum: &commentSortByFields
      - +commentStatus
      - -commentStatus
      - +contactName
      - -contactName
      - +dateAdded
      - -dateAdded

### Comment Period Definitions
  CommentPeriod:
    type: object
    properties:
      _id:
        type: string
        example: "5ab5644e91b5ea001975f3e7"
      _addedBy:
        type: string
        example: "5ab3cd64999d65001916febb"
      _application:
        type: string
        example: "5ab5639291b5ea001975f3e1"
      name:
        type: string
      startDate:
        type: string
        example: "2018-03-06 08:00:00.000Z"
      endDate:
        type: string
        example: "2018-04-05 07:00:00.000Z"
      isDeleted:
        type: boolean
        example: false
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  CommentPeriodFields:
    type: string
    description: "Optional Comment Period fields to return"
    example: "startDate|endDate|etc"
    enum: &commentperiodFields
      - _addedBy
      - _application
      - tags
      - name
      - startDate
      - endDate
      - isDeleted

### Decision Definitions
  Decision:
    type: object
    properties:
      _id:
        type: string
        example: "5b22de2c0aefdc001950452b"
      _addedBy:
        type: string
      _review:
        type: string
      _application:
        type: string
        example: "5c11a6123258140023a45ad9"
      name:
        type: string
      decisionDate:
        type: string
        example: "2019-01-19 00:20:47.053Z"
      isDeleted:
        type: boolean
        example: false
      tags:
        type: string
        example: [["sysadmin"], ["public"]]
  DecisionFields:
    type: string
    description: "Optional Decision fields to return"
    example: "name|date|etc"
    enum: &decisionFields
      - _addedBy
      - _review
      - _application
      - tags
      - name
      - decisionDate
      - isDeleted

### User Definitions
  User:
    type: object
    properties:
      _id:
        type: string
        example: "59ca715ade0757001974dbfb"
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      displayName:
        type: string
        example: "Admin Local"
      email:
        type: string
      username:
        type: string
      password:
        type: string
      salt:
        type: string
      roles:
        type: array
        items:
          type: string
      updated:
        type: string
        example: "2019-01-19 00:20:47.053Z"
      created:
        type: string
        example: "2017-09-26 15:25:14.207Z"
      title:
        type: string
      phoneNumber:
        type: string
      salutation:
        type: string
      department:
        type: string
      faxNumber:
        type: string
      cellPhoneNumber:
        type: string
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      province:
        type: string
      country:
        type: string
      postalCode:
        type: string
      notes:
        type: string
  UserFields:
    type: string
    description: "Optional User fields to return"
    example: "displayName|firstName|etc"
    enum: &userFields
      - firstName
      - middleName
      - lastName
      - displayName
      - email
      - username
      - password
      - salt
      - roles
      - updated
      - created
      - title
      - phoneNumber
      - salutation
      - department
      - faxNumber
      - cellPhoneNumber
      - address1
      - address2
      - city
      - province
      - country
      - postalCode
      - notes

### Common Definitions
  Token:
    type: object
    properties:
      token:
        type: string

  Error:
    type: object
    properties:
      message:
        type: string

paths:
###
### Login Route
###
  /login/token:
    x-swagger-router-controller: login
    options:
      tags:
        - login
      operationId: loginOptions
      description: "Options on Login route"
      summary: "Pre-flight request"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
    post:
      tags:
        - login
      operationId: loginPost
      description: "Return a JWT in order to access authenticated routes"
      summary: "Get a Bearer Token"
      parameters:
        - name: authentication
          in: body
          required: true
          schema:
            type: object
            properties:
              username:
                type: string
                example: "username"
              password:
                type: string
                example: "password"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Token"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Application Routes
###
  /application:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Application route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - application
      summary: "Create a new Application"
      operationId: protectedPost
      description: "Authenticated access to create an Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
      parameters:
        - name: app
          in: body
          required: true
          description: "Data for Application to create"
          schema:
            type: object
            properties:
              _id:
                type: string
                example: "54759eb3c090d83494e2d804"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - application
      summary: "Get META for a list of Applications"
      operationId: protectedHead
      description: "Authenticated access to retrieve META for Application objects, without returning the subject payload"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Applications"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Applications must match"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Crown Land File Number that Applications must match"
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Sub-purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Status(es) that Applications must match"
        - in: query
          name: type
          type: string
          required: false
          description: "Type that Applications must match"
        - in: query
          name: subtype
          type: string
          required: false
          description: "Sub-type that Applications must match"
        - in: query
          name: agency
          type: string
          required: false
          description: "Agency that Applications must match"
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Business Unit that Applications must match"
        - in: query
          name: client
          type: string
          required: false
          description: "Client that Applications must match"
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Tenure Stage that Applications must match"
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Area Hectares(s) that Applications must match"
        - in: query
          name: centroid
          required: false
          description: "Coordinates that Application Centroids must be within"
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Publish Date(s) that Applications must match"
          type: string
          format: date-time
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get a list of Applications"
      operationId: protectedGet
      description: "Authenticated access to retrieve Application objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Applications"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Applications must match"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Crown Land File Number that Applications must match"
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Sub-purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Status(es) that Applications must match"
        - in: query
          name: type
          type: string
          required: false
          description: "Type that Applications must match"
        - in: query
          name: subtype
          type: string
          required: false
          description: "Sub-type that Applications must match"
        - in: query
          name: agency
          type: string
          required: false
          description: "Agency that Applications must match"
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Business Unit that Applications must match"
        - in: query
          name: client
          type: string
          required: false
          description: "Client that Applications must match"
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Tenure Stage that Applications must match"
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Area Hectares(s) that Applications must match"
        - in: query
          name: centroid
          type: string
          required: false
          description: "Coordinates that Application Centroids must be within"
        - in: query
          name: publishDate
          collectionFormat: multi
          type: string
          format: date-time
          required: false
          description: "Publish Date(s) that Applications must match"
        - in: query
          name: statusHistoryEffectiveDate
          type: string
          format: date-time
          required: false
          description: "Status History Effective Date that Applications must compare to"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Application 'get' route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - application
      summary: "Get META for an Application"
      operationId: protectedHead
      description: "Authenticated access to retrieve META for the specified Application, without returning the subject payload"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return a deleted Application"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get an Application"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return a deleted Application"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Update an Application"
      operationId: protectedPut
      description: "Authenticated access to update the specified Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
      parameters:
        - name: appId
          in: path
          description: "ID of Application to update"
          required: true
          type: string
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/Application"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - application
      summary: "Delete an Application"
      operationId: protectedDelete
      description: "Authenticated access to delete the specified Application object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: appId
          in: path
          description: "ID of Application to delete"
          required: true
          type: string
        - name: AppObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/Application"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}/publish:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Application 'publish' route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Publish an Application"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Application"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
        # TODO: Define publish roles.
      parameters:
        - name: appId
          in: path
          description: "ID of Application to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}/unpublish:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Application 'unpublish' route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Unpublish an Application"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Application"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
        # TODO: Define publish roles.
      parameters:
        - name: appId
          in: path
          description: "ID of Application to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /application/{appId}/refresh:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Application 'refresh' route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to refresh"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - application
      summary: "Refresh an Application with the latest data from Tantalis"
      operationId: protectedRefresh
      description: "Authenticated access to refresh the application with the latest data from Tantalis"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:application
      parameters:
        - name: appId
          in: path
          description: "ID of Application to refresh"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/application:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - application
      summary: "Get META for a list of Applications"
      operationId: publicHead
      description: "Retrieve META for Application objects, without returning the subject payload"
      parameters:
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Comment Period Start Date that Applications must compare to"
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "Comment Period End Date that Applications must compare to"
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Applications must match"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Crown Land File Number that Applications must match"
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Sub-purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Status(es) that Applications must match"
        - in: query
          name: type
          type: string
          required: false
          description: "Type that Applications must match"
        - in: query
          name: subtype
          type: string
          required: false
          description: "Sub-type that Applications must match"
        - in: query
          name: agency
          type: string
          required: false
          description: "Agency that Applications must match"
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Business Unit that Applications must match"
        - in: query
          name: client
          type: string
          required: false
          description: "Client that Applications must match"
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Tenure Stage that Applications must match"
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Area Hectares(s) that Applications must match"
        - in: query
          name: statusHistoryEffectiveDate
          type: string
          format: date-time
          required: false
          description: "Status History Effective Date that Applications must compare to"
        - in: query
          name: centroid
          required: false
          description: "Coordinates that Application Centroids must be within"
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Publish Date(s) that Applications must match"
          type: string
          format: date-time
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get a list of Applications"
      operationId: publicGet
      description: "Retrieve Application objects"
      parameters:
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: cpStart
          type: string
          format: date-time
          required: false
          description: "Comment Period Start Date that Applications must compare to"
        - in: query
          name: cpEnd
          type: string
          format: date-time
          required: false
          description: "Comment Period End Date that Applications must compare to"
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Applications must match"
        - in: query
          name: cl_file
          type: number
          required: false
          description: "Crown Land File Number that Applications must match"
        - in: query
          collectionFormat: multi
          name: purpose
          type: string
          required: false
          description: "Purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: subpurpose
          type: string
          required: false
          description: "Sub-purpose(s) that Applications must match"
        - in: query
          collectionFormat: multi
          name: status
          type: string
          required: false
          description: "Status(es) that Applications must match"
        - in: query
          name: type
          type: string
          required: false
          description: "Type that Applications must match"
        - in: query
          name: subtype
          type: string
          required: false
          description: "Sub-type that Applications must match"
        - in: query
          name: agency
          type: string
          required: false
          description: "Agency that Applications must match"
        - in: query
          name: businessUnit
          type: string
          required: false
          description: "Business Unit that Applications must match"
        - in: query
          name: client
          type: string
          required: false
          description: "Client that Applications must match"
        - in: query
          name: tenureStage
          type: string
          required: false
          description: "Tenure Stage that Applications must match"
        - in: query
          name: areaHectares
          collectionFormat: multi
          type: string
          required: false
          description: "Area Hectares(s) that Applications must match"
        - in: query
          name: statusHistoryEffectiveDate
          type: string
          format: date-time
          required: false
          description: "Status History Effective Date that Applications must compare to"
        - in: query
          name: centroid
          required: false
          description: "Coordinates that Application Centroids must be within"
          type: string
        - in: query
          name: publishDate
          collectionFormat: multi
          required: false
          description: "Publish Date(s) that Applications must match"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/application/{appId}:
    x-swagger-router-controller: application
    options:
      tags:
        - application
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Application 'get' route"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - application
      summary: "Get an Application"
      operationId: publicGet
      description: "Retrieve the specified Application object"
      parameters:
        - name: appId
          in: path
          description: "ID of Application to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Application fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *applicationFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Application"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Feature Routes
###
  /feature:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Feature route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - feature
      summary: "Create a new Feature"
      operationId: protectedPost
      description: "Authenticated access to create a Feature object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:feature
      parameters:
        - name: feature
          in: body
          required: true
          description: "Data for Feature to create"
          schema:
            type: object
            properties:
              _id:
                type: string
                example: "54759eb3c090d83494e2d804"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - feature
      summary: "Delete Features"
      operationId: protectedDelete
      description: "Delete Feature object(s)"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
          - name: applicationID
            in: query
            type: string
            required: true
            description: "Application ID that Features must match"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - feature
      summary: "Get a list of Features"
      operationId: protectedGet
      description: "Authenticated access to retrieve Feature objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Feature fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *featureFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Features"
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Features must match"
        - in: query
          name: applicationId
          type: string
          required: false
          description: "Application ID that Features must match"
        - in: query
          name: coordinates
          required: false
          description: "Coordinates that Features must be within"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /feature/{featureId}:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Feature 'get' route"
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - feature
      summary: "Get a Feature"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Feature object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Feature fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *featureFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return a deleted Feature"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - feature
      summary: "Update a Feature"
      operationId: protectedPut
      description: "Authenticated access to update the specified Feature object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:feature
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to update"
          required: true
          type: string
        - name: FeatureObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/Feature"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - feature
      summary: "Delete a Feature"
      operationId: protectedDelete
      description: "Authenticated access to delete the specified Feature object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to delete"
          required: true
          type: string
        - name: FeatureObject
          in: body
          required: true
          schema:
            $ref: "#/definitions/Feature"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /feature/{featureId}/publish:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Feature 'publish' route"
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - feature
      summary: "Publish a Feature"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Feature"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:feature
        # TODO: Define publish roles.
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /feature/{featureId}/unpublish:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Feature 'unpublish' route"
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - feature
      summary: "Unpublish a Feature"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Feature"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:feature
        # TODO: Define publish roles.
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/feature:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Feature route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - feature
      summary: "Get a list of Features"
      operationId: publicGet
      description: "Retrieve Feature objects"
      parameters:
        - in: query
          name: fields
          description: "Feature fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *featureFields
        - in: query
          name: tantalisId
          type: number
          required: false
          description: "Tantalis ID that Features must match"
        - in: query
          name: applicationId
          type: string
          required: false
          description: "Application ID that Features must match"
        - in: query
          name: coordinates
          required: false
          description: "Coordinates that Features must be within"
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/feature/{featureId}:
    x-swagger-router-controller: feature
    options:
      tags:
        - feature
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Feature 'get' route"
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - feature
      summary: "Get a Feature"
      operationId: publicGet
      description: "Retrieve the specified Feature object"
      parameters:
        - name: featureId
          in: path
          description: "ID of Feature to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Feature fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *featureFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Feature"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Search BCGW Routes
###
  /public/search/bcgw/crownLandsId/{crownLandsId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on 'Search BCGW by Crown Lands ID' route"
      parameters:
        - name: crownLandsId
          in: path
          description: "Crown Lands ID of Crown Lands object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Search BCGW by Crown Lands ID"
      operationId: publicGetBCGW
      description: "Retrieve Crown Lands objects from the BCGW"
      parameters:
        - name: crownLandsId
          in: path
          description: "Crown Lands ID of object(s) to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Search fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *searchFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/search/bcgw/getClientsInfoByDispositionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on 'Search BCGW Client Info by Disposition ID' route"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID to get client info about"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Search BCGW Client Info by Disposition ID"
      operationId: publicGetClientsInfoByDispositionId
      description: "Retrieve Client Info objects from the BCGW"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID get client info about"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/search/bcgw/dispositionTransactionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on 'Search BCGW by Disposition Transaction ID' route"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Search BCGW by Disposition Transaction ID"
      operationId: publicGetBCGWDispositionTransactionId
      description: "Retrieve Tantalis objects from the BCGW"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Tantalis object(s) to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Search fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *searchFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/search/dispositionTransactionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on 'Get Features by Disposition Transaction ID' route"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Get a list of Features by Disposition Transaction ID"
      operationId: publicGetDispositionTransactionId
      description: "Retrieve Feature objects from local database"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Features to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Search fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *searchFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Search Tantalis Routes
###
  /ttlsapi/dispositionTransactionId/{dtId}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated 'Get Application data by Disposition Transaction ID' route"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Search for application data from Tantalis API by Disposition Transaction ID"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      operationId: protectedTTLSGetApplicationByDisp
      description: "Authenticated access to retrieve Application data by Disposition Transaction ID from Tantalis API"
      parameters:
        - name: dtId
          in: path
          description: "Disposition Transaction ID of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /ttlsapi/crownLandFileNumber/{fileNumber}:
    x-swagger-router-controller: search
    options:
      tags:
        - search
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated 'Get Application data by Crown Land File Number' route"
      parameters:
        - name: fileNumber
          in: path
          description: "Crown Land File Number of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - search
      summary: "Search for application data from Tantalis API by Crown Land File Number"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      operationId: protectedTTLSGetApplicationsByFileNumber
      description: "Authenticated access to retrieve Application data by Crown Land File Number from Tantalis API"
      parameters:
        - name: fileNumber
          in: path
          description: "Crown Land File Number of Tantalis object(s) to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Search"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Document Routes
###
  /document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Document route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Upload a new Document"
      operationId: protectedPost
      description: "Authenticated access to create a Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application this Document relates to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision this Document relates to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment this Document relates to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The Display Name of the file"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of Documents"
      operationId: protectedGet
      description: "Authenticated access to retrieve Document objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _application
          description: "Application ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _decision
          description: "Decision ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Comment ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Documents"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Document 'get' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a Document"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Update a Document"
      operationId: protectedPut
      description: "Authenticated access to update the specified Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - multipart/form-data
      parameters:
        - name: docId
          in: path
          description: "ID of Document to update"
          required: true
          type: string
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application this Document relates to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision this Document relates to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment this Document relates to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The Display Name of the file"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - document
      summary: "Delete a Document"
      operationId: protectedDelete
      description: "Authenticated access to delete the specified Document object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
      consumes:
        - application/json
      parameters:
        - name: docId
          in: path
          description: "ID of Document to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/publish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Document 'publish' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Publish a Document"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Document"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
        # TODO: Define publish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of Document to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/unpublish:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Document 'unpublish' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - document
      summary: "Unpublish a Document"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Document"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:document
        # TODO: Define unpublish roles.
      parameters:
        - name: docId
          in: path
          description: "ID of Document to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Document 'download' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a Document"
      operationId: protectedDownload
      description: "Authenticated access to download the specified Document's binary"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - document
      summary: "Upload a new Document"
      operationId: unProtectedPost
      description: "Create a Document object"
      consumes:
        - multipart/form-data
      parameters:
        - name: upfile
          in: formData
          description: "The file to upload"
          required: true
          type: file
        - name: _application
          in: formData
          description: "The Application this Document relates to"
          required: false
          type: string
        - name: _decision
          in: formData
          description: "The Decision this Document relates to"
          required: false
          type: string
        - name: _comment
          in: formData
          description: "The Comment this Document relates to"
          required: false
          type: string
        - name: displayName
          in: formData
          description: "The Display Name of the file"
          required: false
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a list of Documents"
      operationId: publicGet
      description: "Retrieve Document objects"
      parameters:
        - in: query
          name: _application
          description: "Application ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _decision
          description: "Decision ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: _comment
          description: "Comment ID(s) that Documents must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document 'get' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Get a Document"
      operationId: publicGet
      description: "Retrieve the specified Document object"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Document fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *documentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/document/{docId}/download:
    x-swagger-router-controller: document
    options:
      tags:
        - document
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Document 'download' route"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - document
      summary: "Download a Document"
      operationId: publicDownload
      description: "Download the specified Document's binary"
      parameters:
        - name: docId
          in: path
          description: "ID of Document to download"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Document"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### User Routes
###
  /user:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated User route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - user
      summary: "Create a new User"
      operationId: protectedPost
      description: "Authenticated access to create a User object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:user
      parameters:
        - name: user
          in: body
          required: true
          description: "Data for User to create"
          schema:
            type: object
            properties:
              displayName:
                type: string
                example: "A cool User"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a list of Users"
      operationId: protectedGet
      description: "Authenticated access to retrieve User objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - in: query
          name: fields
          description: "User fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /user/{userId}:
    x-swagger-router-controller: user
    options:
      tags:
        - user
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated User 'get' route"
      parameters:
        - name: userId
          in: path
          description: "ID of User to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - user
      summary: "Get a User"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified User object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
      parameters:
        - name: userId
          in: path
          description: "ID of User to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "User fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *userFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - user
      summary: "Update a User"
      operationId: protectedPut
      description: "Authenticated access to update the specified User object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:user
      parameters:
        - name: userId
          in: path
          description: "ID of User to update"
          required: true
          type: string
        - name: user
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/User"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Decision Routes
###
  /decision:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Decision route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - decision
      summary: "Create a new Decision"
      operationId: protectedPost
      description: "Authenticated access to create a Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      parameters:
        - name: decision
          in: body
          description: "Data for Decision to create"
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: "A cool Decision Name"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a list of Decisions"
      operationId: protectedGet
      description: "Authenticated access to retrieve Decision objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
        - in: query
          name: _application
          description: "Application ID(s) that Decisions must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Decisions"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Decision 'get' route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a Decision"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Update a Decision"
      operationId: protectedPut
      description: "Authenticated access to update the specified Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to update"
          required: true
          type: string
        - name: decision
          in: body
          required: true
          schema:
            $ref: "#/definitions/Decision"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - decision
      summary: "Delete a Decision"
      operationId: protectedDelete
      description: "Authenticated access to delete the specified Decision object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
      consumes:
        - application/json
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}/publish:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Decision 'publish' route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Publish a Decision"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Decision"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
        # TODO: Define publish roles.
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /decision/{decisionId}/unpublish:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Decision 'unpublish' route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - decision
      summary: "Unpublish a Decision"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Decision"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:decision
        # TODO: Define publish roles.
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/decision:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a list of Decisions"
      operationId: publicGet
      description: "Retrieve Decision objects"
      parameters:
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
        - in: query
          name: _application
          description: "Application ID(s) that Decisions must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/decision/{decisionId}:
    x-swagger-router-controller: decision
    options:
      tags:
        - decision
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Decision 'get' route"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - decision
      summary: "Get a Decision"
      operationId: publicGet
      description: "Retrieve the specified Decision object"
      parameters:
        - name: decisionId
          in: path
          description: "ID of Decision to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Decision fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *decisionFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Decision"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### Comment Routes
###
  /comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - comment
      summary: "Get META for a list of Comments"
      operationId: protectedHead
      description: "Authenticated access to retrieve META for Comment objects, without returning the subject payload"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _commentPeriod
          description: "Comment Period(s) that Comments must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Comments"
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: sortBy
          description: "Comment fields to sort by"
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of Comments"
      operationId: protectedGet
      description: "Authenticated access to retrieve Comment objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _commentPeriod
          description: "Comment Period(s) that Comments must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Comments"
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: sortBy
          description: "Comment fields to sort by"
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment 'get' route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a Comment"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Comment object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Update a Comment"
      operationId: protectedPut
      description: "Authenticated access to update the specified Comment object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:comment
      consumes:
        - multipart/form-data
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to update"
          required: true
          type: string
        - name: comment
          in: body
          required: true
          schema:
            $ref: "#/definitions/Comment"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}/publish:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment 'publish' route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Publish a Comment"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Comment object"
      security:
        - Bearer: []
      x-security-scopes:
        - publish:comment
        # TODO: Define publish roles.
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /comment/{CommentId}/unpublish:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment 'unpublish' route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - comment
      summary: "Unpublish a Comment"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Comment object"
      security:
        - Bearer: []
      x-security-scopes:
        - unpublish:comment
        # TODO: Define unpublish roles.
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - comment
      summary: "Create a new Comment"
      operationId: unProtectedPost
      description: "Create a Comment object"
      parameters:
        - name: comment
          in: body
          required: true
          description: "Data for Comment to create"
          schema:
            $ref: "#/definitions/Comment"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a list of Comments"
      operationId: publicGet
      description: "Retrieve Comment objects"
      parameters:
        - in: query
          name: _commentPeriod
          description: "Comment Period(s) that Comments must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
        - in: query
          name: pageNum
          type: number
          required: false
          description: "Page Number (default: 0)"
        - in: query
          name: pageSize
          type: number
          required: false
          description: "Number of results per page (if 'pageNum' is specified; default: 100)"
        - in: query
          name: sortBy
          description: "Comment fields to sort by"
          required: false
          type: array
          items:
            type: string
            enum: *commentSortByFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/comment/{CommentId}:
    x-swagger-router-controller: comment
    options:
      tags:
        - comment
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment 'get' route"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - comment
      summary: "Get a Comment"
      operationId: publicGet
      description: "Retrieve the specified Comment object"
      parameters:
        - name: CommentId
          in: path
          description: "ID of Comment to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Comment fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Comment"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"

###
### CommentPeriod Routes
###
  /commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment Period route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    post:
      tags:
        - commentperiod
      summary: "Create a new Comment Period"
      operationId: protectedPost
      description: "Authenticated access to create a Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      parameters:
        - name: _commentPeriod
          in: body
          required: true
          description: "Data for Comment Period to create"
          schema:
            $ref: "#/definitions/CommentPeriod"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of Comment Periods"
      operationId: protectedGet
      description: "Authenticated access to retrieve Comment Period objects"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - in: query
          name: _application
          description: "Application(s) that Comment Periods must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return deleted Comment Periods"
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentperiodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment Period 'get' route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    head:
      tags:
        - commentperiod
      summary: "Get META for a Comment Period"
      operationId: protectedHead
      description: "Authenticated access to retrieve META for the specified Comment Period object, without returning the subject payload"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: string
        - in: query
          name: _application
          description: "Application(s) that Comment Periods must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: isDeleted
          type: boolean
          required: false
          description: "Whether to return a deleted Comment Period"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a Comment Period"
      operationId: protectedGet
      description: "Authenticated access to retrieve the specified Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - user
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: string
        - in: query
          name: _application
          description: "Application(s) that Comment Periods must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Update a Comment Period"
      operationId: protectedPut
      description: "Authenticated access to update the specified Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      consumes:
        - application/json
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to update"
          required: true
          type: string
        - name: cp
          in: body
          required: true
          schema:
            $ref: "#/definitions/CommentPeriod"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    delete:
      tags:
        - commentperiod
      summary: "Delete a Comment Period"
      operationId: protectedDelete
      description: "Authenticated access to delete the specified Comment Period object"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
      consumes:
        - application/json
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to delete"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}/publish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment Period 'publish' route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Publish a Comment Period"
      operationId: protectedPublish
      description: "Authenticated access to add the singular instance of the 'public' role to the specified Comment Period"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
        # TODO: Define publish roles.
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to publish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /commentperiod/{CommentPeriodId}/unpublish:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on authenticated Comment Period 'unpublish' route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    put:
      tags:
        - commentperiod
      summary: "Unpublish a Comment Period"
      operationId: protectedUnPublish
      description: "Authenticated access to remove the singular instance of the 'public' role from the specified Comment Period"
      security:
        - Bearer: []
      x-security-scopes:
        - sysadmin
        - write:commentperiod
        # TODO: Define unpublish roles.
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to unpublish"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period route"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a list of Comment Periods"
      operationId: publicGet
      description: "Retrieve Comment Period objects"
      parameters:
        - in: query
          name: _application
          description: "Application IDs that Comment Periods must relate to"
          type: array
          required: false
          collectionFormat: pipes
          items:
            type: string
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentperiodFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
  /public/commentperiod/{CommentPeriodId}:
    x-swagger-router-controller: commentperiod
    options:
      tags:
        - commentperiod
      summary: "Pre-flight request"
      operationId: protectedOptions
      description: "Options on Comment Period 'get' route"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
    get:
      tags:
        - commentperiod
      summary: "Get a Comment Period"
      operationId: publicGet
      description: "Retrieve the specified Comment Period object"
      parameters:
        - name: CommentPeriodId
          in: path
          description: "ID of Comment Period to get"
          required: true
          type: string
        - in: query
          name: fields
          description: "Comment Period fields to return"
          required: false
          type: array
          collectionFormat: pipes
          items:
            type: string
            enum: *commentFields
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/CommentPeriod"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/Error"
